https://github.com/neemiasbsilva/object-detection-opencv/blob/master/template-matching.ipynb
要將圖像中的特定顏色保留為黑白，並將其他顏色設置為透明，您可以使用 OpenCV 的遮罩（mask）技術。以下是一個基本的步驟：

1. **讀取圖像：**
   使用 OpenCV 讀取您要處理的圖像。

   ```python
   import cv2

   # 讀取圖像
   image = cv2.imread('your_image.jpg')
   ```

2. **轉換為灰度圖像：**
   將圖像轉換為灰度圖像，以便更容易識別顏色。

   ```python
   gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
   ```

3. **創建遮罩：**
   創建一個與圖像大小相同的遮罩，並將保留的黑白顏色區域設置為白色（255），其他區域設置為黑色（0）。

   ```python
   _, mask = cv2.threshold(gray_image, 240, 255, cv2.THRESH_BINARY)
   ```

4. **應用遮罩：**
   使用遮罩將圖像中的顏色保留為黑白，其他顏色設置為透明。

   ```python
   result = cv2.bitwise_and(image, image, mask=mask)
   ```

5. **顯示結果：**
   顯示處理後的圖像。

   ```python
   cv2.imshow('Result', result)
   cv2.waitKey(0)
   cv2.destroyAllWindows()
   ```
import cv2
import numpy as np

# 讀取圖像
image = cv2.imread('your_image.jpg')

# 將圖像轉換為HSV色彩空間
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

# 定義顏色範圍
lower_red = np.array([0, 100, 100])
upper_red = np.array([10, 255, 255])

lower_green = np.array([40, 100, 100])
upper_green = np.array([80, 255, 255])

lower_blue = np.array([100, 100, 100])
upper_blue = np.array([140, 255, 255])

# 創建遮罩
mask_red = cv2.inRange(hsv, lower_red, upper_red)
mask_green = cv2.inRange(hsv, lower_green, upper_green)
mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)

# 合併遮罩
combined_mask = cv2.bitwise_or(mask_red, cv2.bitwise_or(mask_green, mask_blue))

# 將合併遮罩應用於原始圖像
result = cv2.bitwise_and(image, image, mask=combined_mask)

# 顯示結果
cv2.imshow('Combined Mask', combined_mask)
cv2.imshow('Result', result)
cv2.waitKey(0)
cv2.destroyAllWindows()
這樣，您就可以將圖像中的特定顏色保留為黑白，並將其他顏色設置為透明。調整遮罩的閾值 (`cv2.threshold`) 可以控制保留的顏色範圍。
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
gray_masked = cv2.bitwise_and(gray, gray, mask=cv2.bitwise_not(mask))


import cv2
import numpy as np

# 讀取圖像
image = cv2.imread('your_image.jpg')

# 定義顏色範圍
lower_red = np.array([0, 50, 50])
upper_red = np.array([10, 255, 255])

lower_green = np.array([40, 50, 50])
upper_green = np.array([80, 255, 255])

lower_blue = np.array([100, 50, 50])
upper_blue = np.array([140, 255, 255])

# 將圖像轉換為HSV色彩空間
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

# 創建紅色、綠色、藍色遮罩
mask_red = cv2.inRange(hsv, lower_red, upper_red)
mask_green = cv2.inRange(hsv, lower_green, upper_green)
mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)

# 將三個遮罩合併成一個
combined_mask = cv2.bitwise_or(mask_red, cv2.bitwise_or(mask_green, mask_blue))

# 將合併遮罩應用於原始圖像，將紅、綠、藍色區域轉為灰色
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
image[np.tile(combined_mask[:, :, np.newaxis], (1, 1, 3)) == 255] = [128, 128, 128]

# 保留其他顏色區域

# 顯示結果
cv2.imshow('Result', image)
cv2.waitKey(0)
cv2.destroyAllWindows()



import cv2
import numpy as np

# 讀取圖像
image = cv2.imread('your_image.jpg')

# 將圖像轉換為灰度
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# 二值化圖像
_, binary_image = cv2.threshold(gray_image, 1, 255, cv2.THRESH_BINARY)

# 尋找輪廓
contours, _ = cv2.findContours(binary_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# 計算黑色圖形的數量
black_shapes_count = len(contours)

print("Number of black shapes:", black_shapes_count)

# 在圖像上繪製輪廓
cv2.drawContours(image, contours, -1, (0, 255, 0), 2)

# 顯示結果
cv2.imshow('Result', image)
cv2.waitKey(0)
cv2.destroyAllWindows()
